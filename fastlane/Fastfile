def lock_exec(lockname = "global", &block)
  # wait 30 seconds between checks
  lock_recheck_sleep_time = 30

  # wait max 2 hours
  max_waited_time = 60 * 2 * (2 * lock_recheck_sleep_time)

  lock_file_name = "/tmp/fastlane_#{lockname}.lock"
  current_pid = Process.pid

  Fastlane::UI.message("[LOCKER] Locking execution context '#{lockname}' -> '#{lock_file_name}' ...")

  waited_time = 0
  loop do
    # exit the loop if:
    # - lock_file does not exist
    # or - waited more than 2h, that process must be hung somewhere
    break if !File.exist?(lock_file_name) || waited_time >= max_waited_time

    # get the current locking process pid from the lock file
    locking_pid = Integer(File.read(lock_file_name))

    # check whether the process still exists
    # break the loop if it doesn't exits
    begin
      Process.getpgid(locking_pid)
    rescue Errno::ESRCH
      File.delete(lock_file_name)
      break
    end

    tries = 1 + waited_time / lock_recheck_sleep_time
    Fastlane::UI.message("[LOCKER] Waiting #{lock_recheck_sleep_time} seconds for execution context '#{lockname}' to unlock. Try ##{tries}.")

    # wait a little bit, then try again
    sleep lock_recheck_sleep_time
    waited_time += lock_recheck_sleep_time
  end

  # create the lock file with the current process pid
  File.open(lock_file_name, "w") do |f|
    f.write(current_pid)
    f.close
  end

  Fastlane::UI.message("[LOCKER] Locked execution context '#{lockname}' -> '#{lock_file_name}'.")

  # execute the block
  block.call

  # remove the lock file
  File.delete(lock_file_name)
  Fastlane::UI.message("[LOCKER] Unlocked execution context '#{lockname}' -> '#{lock_file_name}'.")
end

def lock_pods(&block)
    lock_exec("cocoapods") { block.call }
end

def lock_simulator(&block)
    lock_exec("simulator") { block.call }
end

def unlockkeychain
  unlock_keychain(path: "iosbuilder", password: "#{ENV["KEYCHAIN_PASSWORD"]}")
end

def warmup_simulator(device_type = "iPhone-6, 9.3")
  sim_device_type = "com.apple.CoreSimulator.SimDeviceType.#{device_type}"
  Fastlane::UI.message("[SIMULATOR-HELPER] Starting #{device_type}")
  `ios-sim start --devicetypeid "#{sim_device_type}" >/dev/null 2>&1 || true`

  sleep 15
end

def uninstall_simapp(appid)
  `xcrun simctl uninstall booted '#{appid}' || exit 0`
end

def close_simulator
  Fastlane::UI.message("[SIMULATOR-HELPER] Closing the simulator")
  `osascript -e 'tell app "Simulator" to quit'`
  `osascript -e 'tell app "iOS Simulator" to quit'`
end

